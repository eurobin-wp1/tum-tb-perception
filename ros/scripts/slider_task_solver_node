#!/usr/bin/env python3

"""
Estimates the distance by which the slider must be moved to solve
the taskboard slider task by determining the positions of triangle markers
on the LCD.
Runs continuously, processing every incoming image.

Note: the functionality provided by this node could be encapsulated in a
ROS action in the future.

Optionally runs the detector only after a ROS/UDP trigger message.
Optionally saves all input and output (annotated with results) images.
"""

import os
import sys
import json
import time
import socket
import signal
import datetime

import cv2
import rospy
import rospkg
import numpy as np

from cv_bridge import CvBridge, CvBridgeError

from std_msgs.msg import Bool
from sensor_msgs.msg import Image
from std_msgs.msg import Float32

cv2_text_label_font_ = cv2.FONT_HERSHEY_SIMPLEX
cv2_text_label_font_scale_ = 0.35
template_matching_method_ = cv2.TM_CCOEFF_NORMED
text_label_colors_ = dict(zip(['red', 'white_center', 'green', 'lcd'], 
                              [(0, 0, 255), (255, 255, 255), 
                               (0, 255, 0), (255, 0, 0)]))

# Task stage key:
# 1: moving red triangle to center white triangle
# 2: moving red triangle to green triangle
task_stage_options_ = [1, 2]

## ----------------------------------------------------------------------
## UDP Parameters
## ----------------------------------------------------------------------

udp_buffer_size_ = 1024

## ----------------------------------------------------------------------
## ROS Callbacks and Message Initializations:
## ----------------------------------------------------------------------

current_image_msg_ = None
ros_triggered_ = False

def image_callback(msg):
    global current_image_msg_ 
    current_image_msg_ = msg

def trigger_callback(msg):
    global ros_triggered_

    rospy.loginfo('[slider_task_solver] Received trigger ROS message')
    ros_triggered_ = msg.data

## ----------------------------------------------------------------------
## Functions:
## ----------------------------------------------------------------------

def load_template_images(image_dir_path, 
                         object_ids=['red', 'white_center', 'green', 'lcd'],
                         debug=False):
    """
    Loads all images that can be uses as templates for the given object_ids
    from the image_dir_path directory.

    Note: expects all images within image_dir_path whose filename contains the
    substring "template" to be candidates for extracting the templates.

    Parameters
    ----------
    image_dir_path: str
        Path to directory containing candidate template images.
    object_ids: list
        Template object ID strings (included in filenames).
    debug: bool
        Whether to print some debugging messages

    Returns
    -------
    template_images_dict: dict
        Mapping between object IDs and lists of ndarrays containing loaded images.
    """

    # Load template images:
    template_images_dict = {}
    image_filename_list = [filename for filename in os.listdir(image_dir_path) \
                               if 'template' in filename]

    for object_id in object_ids:
        if object_id not in template_images_dict.keys():
            template_images_dict[object_id] = []
        # Grab first valid image for each template:
        for image_filename in image_filename_list:
            if object_id in image_filename:
                if debug:
                    print(f'[DEBUG] Using image for {object_id}: ' + \
                          f' {image_filename}')
                image_path = os.path.join(image_dir_path, image_filename)
                image_array = cv2.imread(image_path)  # Note: in BGR format
                template_images_dict[object_id].append(image_array)
        if not image_filename_list:
            raise AssertionError(f'Unable to extract a single template' + \
                                 f' for object {object_id}')

    return template_images_dict

def check_task_stage_value(task_stage):
    """
    Checks the validity of the given task_stage value.

    Parameters
    ----------
    task_stage: int
        Represents the current slider task stage:
          - 1: red marker to the center white marker
          - 2: red marker to the green marker

    Returns
    -------
    valid: bool
        Whether the task stage value is valid
    """
    global task_stage_options_

    if task_stage in task_stage_options_:
        if task_stage == 1:
            rospy.loginfo(f'[slider_task_solver] Running for task stage 1: ' + \
                           'moving the red marker to the center white ' + \
                           'marker.')
        elif task_stage == 2:
            rospy.loginfo(f'[slider_task_solver] Running for task stage 2: ' + \
                           'moving the red marker to the green marker.')
    else:
        rospy.logwarn(f'[slider_task_solver] Invalid value for task stage ' + \
                      f'parameter! Must be one of {task_stage_options_}')
        return False

    return True

def set_task_stage(task_stage, template_images_dict):
    """
    Sets parameters according to slider task stage:
      - Set initial and goal triangles' IDs
      - Ignore specific templates

    Parameters
    ----------
    task_stage: int
        Represents the current slider task stage:
    template_images_dict: dict
        Mapping between object IDs and lists of ndarrays containing template images.

    Returns
    -------
    template_images_dict: dict
        Mapping between object IDs and lists of ndarrays containing template images.
    initial_point_id: str
        ID of "initial" marker: ['red', 'white_center', 'green']
    goal_point_id: str
        ID of "goal" marker: ['red', 'white_center', 'green']
    """
    if task_stage == 1:
        initial_point_id, goal_point_id = 'red', 'white_center'
        template_images_dict.pop('green')
    elif task_stage == 2:
        initial_point_id, goal_point_id = 'red', 'green'
        template_images_dict.pop('white_center')

    return template_images_dict, initial_point_id, goal_point_id


if __name__ == '__main__':
    ## ----------------------------------------------------------------------
    ## ROS Initializations:
    ## ----------------------------------------------------------------------
    rospy.init_node('slider_task_solver')
    rate = rospy.Rate(10)

    package_path = rospkg.RosPack().get_path('eurobin_perception')

    template_source_image_dir_path = rospy.get_param(
          '~template_source_image_dir_path', 
          os.path.join(package_path, 'models/slider_solver_templates_images',)
    )
    output_dir_path = rospy.get_param(
        '~output_dir_path', 
        os.path.join(package_path, 'output_data')
    )
    task_stage = rospy.get_param('~task_stage', 1)
    detection_score_threshold = rospy.get_param('~detection_score_threshold', 
                                                0.98)
    run_on_ros_trigger = rospy.get_param('~run_on_ros_trigger', False)
    run_on_udp_trigger = rospy.get_param('~run_on_udp_trigger', True)
    udp_ip = rospy.get_param('~udp_ip', 'localhost')
    udp_port = rospy.get_param('~udp_port', 8000)

    image_topic = rospy.get_param('~image_topic', '/camera/color/image_raw')
    trigger_topic = rospy.get_param('~trigger_topic',
                                    '/eurobin_perception/silder_solver_trigger')
    image_pub_topic = rospy.get_param('~image_pub_topic', 
                                      '/eurobin_perception/slider_solver_images')
    input_image_pub_topic = rospy.get_param(
            '~input_image_pub_topic', 
            '/eurobin_perception/slider_solver_input_images'
    )
    slider_distance_pub_topic = rospy.get_param(
            '~slider_distance_pub_topic', 
            '/eurobin_perception/slider_solver_result'
    )

    publish_visual_output = rospy.get_param('~publish_visual_output', True)
    save_output = rospy.get_param('~save_output', False)
    debug = rospy.get_param('~debug', False)

    image_subscriber = rospy.Subscriber(image_topic, Image, image_callback)
    if run_on_ros_trigger:
        trigger_subscriber = rospy.Subscriber(trigger_topic, Bool, trigger_callback)

    slider_distance_publisher = rospy.Publisher(slider_distance_pub_topic, 
                                                Float32, queue_size=10)
    if publish_visual_output:
        slider_solver_image_publisher = rospy.Publisher(image_pub_topic, 
                                                        Image, queue_size=10)
        input_image_publisher = rospy.Publisher(input_image_pub_topic, 
                                                Image, queue_size=10)

    # Check validity of task stage value:
    if task_stage in task_stage_options_:
        if task_stage == 1:
            rospy.loginfo(f'[slider_task_solver] Running for task stage 1: ' + \
                           'moving the red marker to the center white ' + \
                           'marker.')
        elif task_stage == 2:
            rospy.loginfo(f'[slider_task_solver] Running for task stage 2: ' + \
                       'moving the red marker to the green marker.')
    else:
        rospy.logerr(f'[slider_task_solver] Invalid value for task stage ' + \
                      'parameter! Must be one of {task_stage_options_}')
        sys.exit(1)


    # Verify trigger setting (ROS OR UDP):
    if run_on_ros_trigger and run_on_udp_trigger:
        rospy.logerr('[slider_task_solver] Node supports trigger messages from' + \
                     ' either ROS or UDP, but run_on_ros_trigger and' + \
                     ' run_on_udp_trigger were both set to true!')
        rospy.logerr('[slider_task_solver] Terminating.')
        sys.exit(1)

    # Set up output data directory:
    if save_output:
        output_sub_dir_path = 'slider_solver_output_' + \
                              datetime.datetime.now().strftime("%Y%m%d_%H%M%S")
        output_dir_path = os.path.join(output_dir_path, output_sub_dir_path)
        rospy.loginfo(f'[slider_task_solver] Saving output data in ' + \
                      f'{output_dir_path}')

        if not os.path.isdir(output_dir_path):
            rospy.loginfo(f'[slider_task_solver] Output directory does not exist! ' + \
                          f' Creating now...')
            os.makedirs(output_dir_path)

    bridge = CvBridge()

    ## ----------------------------------------------------------------------
    ## Slider Solver Execution:
    ## ----------------------------------------------------------------------

    try:
        marker_loading_start_time = time.time()

        rospy.loginfo(f'[slider_task_solver] Loading marker templates...')

        # Load marker template images:
        template_images_dict = load_template_images(
                template_source_image_dir_path, 
                object_ids=['red', 'white_center', 'green'],
                debug=debug
        )
        rospy.loginfo(f'[slider_task_solver] Found markers:')
        for template_id, result_list in template_images_dict.items():
            rospy.loginfo(f'[slider_task_solver]   - {template_id}:' + \
                          f' {len(result_list )}')

        # Set parameters according to slider task stage:
        #   - Set initial and goal triangles' IDs
        #   - Ignore specific templates
        template_images_dict = dict(template_images_dict)
        if task_stage == 1:
            initial_point_id, goal_point_id = 'red', 'white_center'
            template_images_dict.pop('green')
        elif task_stage == 2:
            initial_point_id, goal_point_id = 'red', 'green'
            template_images_dict.pop('white_center')

        elapsed_time = time.time() - marker_loading_start_time
        rospy.loginfo(f'[slider_task_solver] Finished in {elapsed_time:.3f}s')

        rospy.loginfo(f'[slider_task_solver] Subscribing to topic: {image_topic}')
        rospy.loginfo(f'[slider_task_solver] Waiting for reception of first message...')
        try:
            while current_image_msg_ is None:
                rospy.sleep(0.1)
        except (KeyboardInterrupt, rospy.ROSInterruptException):
            rospy.loginfo('[slider_task_solver] Terminating...')
            sys.exit(0)

        rospy.loginfo('[slider_task_solver] Received first image message')

        rospy.loginfo(f'[slider_task_solver] Will estimate solution distance ' + \
                       'for every image message.')

        if run_on_ros_trigger:
            rospy.loginfo(f'[slider_task_solver] Will estimate solution distance '
                          f'on the latest image message at every trigger ' + \
                          f'ROS message on topic {trigger_topic}...')
        elif run_on_udp_trigger:
            rospy.loginfo(f'[slider_task_solver] Will estimate solution distance '
                          f'on the latest image message at every trigger ' + \
                          f'UDP message over IP {udp_ip} and port {udp_port}...')

            udp_socket = socket.socket(socket.AF_INET, socket.SOCK_DGRAM)
            udp_socket.settimeout(None)
            udp_socket.bind((udp_ip, udp_port))
        else:
            rospy.loginfo(f'[slider_task_solver] Will estimate solution distance ' + \
                           'for every incoming image message...')

        while not rospy.is_shutdown():
            if run_on_ros_trigger:
                # Note: using a signal SIGINT handler here because a try-except
                # block does not work for the inner while loop (does not terminate cleanly).
                signal.signal(signal.SIGINT, signal.SIG_DFL);
                while not ros_triggered_:
                    rate.sleep()
                ros_triggered_ = False
            elif run_on_udp_trigger:
                # Note: the following will block until a message is received:
                signal.signal(signal.SIGINT, signal.SIG_DFL);
                udp_msg, udp_addr = udp_socket.recvfrom(udp_buffer_size_)

                rospy.loginfo('[slider_task_solver] Received trigger UDP message')
                udp_msg_data = json.loads(udp_msg.decode())

                try:
                    if type(udp_msg_data['trigger']).__name__ != 'str' or \
                            udp_msg_data['trigger'] != "True":
                        rospy.logwarn('[slider_task_solver] Received invalid value' + \
                                      ' in UDP message dict for key trigger:' + \
                                     f' {udp_msg_data["trigger"]}. Will only' + \
                                      ' trigger on "True". Ignoring... ')
                        continue
                except Exception as e:
                    rospy.logwarn('[slider_task_solver] Could not access trigger' + \
                                  ' information in UDP message! Please check' + \
                                 f' message format!. Ignoring...')
                    continue
            else:
                try:
                    rate.sleep()
                except rospy.ROSTimeMovedBackwardsException as e:
                    rospy.logwarn('[slider_task_solver] Caught ROSTimeMovedBackwardsException ' + \
                                  'when executing rate.sleep(). This can happen when ' + \
                                  'incoming messages had stopped, and have just ' + \
                                  'resumed publishing.')

            if run_on_ros_trigger or run_on_udp_trigger:
                rospy.loginfo(f'[slider_task_solver] Estimating slider distance...')
            start_time = time.time()

            try:
                image_cv = bridge.imgmsg_to_cv2(current_image_msg_, "bgr8")
            except CvBridgeError as e:
                rospy.logwarn('[slider_task_solver] Failed to convert image ' + \
                              ' message to opencv format!')
                print('Error:', e)
                continue

            # rospy.loginfo(f'[slider_task_solver] Detecting markers on image...')

            # Detect templates in input image:
            vis_image_array = image_cv.copy()
            template_positions_dict = {}
            detection_scores_dict = {}

            for template_id, temp_image_array_list in template_images_dict.items():
                for temp_image_array in temp_image_array_list:
                    # Apply template Matching
                    # Source: https://docs.opencv.org/3.4/d4/dc6/tutorial_py_template_matching.html
                    res = cv2.matchTemplate(image_cv, temp_image_array, 
                                            template_matching_method_)
                    min_val, max_val, min_loc, max_loc = cv2.minMaxLoc(res)

                    if debug:
                        print(f'\n[DEBUG] Checking for template: {template_id}')
                        print(f'[DEBUG] Current score: {max_val}')

                    if max_val < detection_score_threshold:
                        if debug:
                            print(f'[DEBUG] Could not find a detection with a' + \
                                  f' score that is higher than threshold ' + \
                                  f' {detection_score_threshold}.')
                            print(f'[DEBUG] Trying another template source...')
                    else:
                        if debug:
                            print(f'[DEBUG] Suitable detection found!')
                        detection_scores_dict[template_id] = max_val

                        w, h = (temp_image_array.shape[1], temp_image_array.shape[0])
                        top_left = max_loc
                        bottom_right = (top_left[0] + w, top_left[1] + h)
                        centroid = (int(top_left[0] + (w / 2.)), 
                                    int(top_left[1] + (h / 2.)))
                        template_positions_dict[template_id] = centroid

                        # Annotate image with BB and centroid point:
                        cv2.rectangle(vis_image_array, top_left, bottom_right,
                                      color=text_label_colors_[template_id], 
                                      thickness=2)
                        cv2.circle(vis_image_array, centroid, 1, 
                                   color=(0., 0., 0.), thickness=1)

                        # Annotate image with faded text labels:
                        overlay = np.copy(vis_image_array)
                        overlay = cv2.rectangle(overlay,
                                                (top_left[0], top_left[1] - 15),
                                                (top_left[0] + w, top_left[1]),
                                                text_label_colors_[template_id], -1)
                        overlay = cv2.putText(overlay, template_id,
                                              (top_left[0], top_left[1] - 5),
                                              cv2_text_label_font_, 
                                              cv2_text_label_font_scale_,
                                              (0., 0., 0.), 1)
                        alpha = 0.5
                        cv2.addWeighted(overlay, alpha, vis_image_array,
                                        1 - alpha, 0, vis_image_array)
                        break
                else:
                    rospy.logwarn(f'[slider_task_solver] "{template_id}" ' + \
                                  f'could not be detected!')

            if debug:
                print(f'[DEBUG] Template positions: {template_positions_dict}')
                print(f'[DEBUG] Detection scores: {detection_scores_dict}')

            # rospy.loginfo(f'[slider_task_solver] Estimating distance between markers...')

            # Estimate distance between positions in image space:
            estimated_pixel_distance = None
            if initial_point_id in template_positions_dict.keys() and \
                    detection_scores_dict[initial_point_id] >= detection_score_threshold:
                if goal_point_id in template_positions_dict.keys() and \
                        detection_scores_dict[goal_point_id] >= detection_score_threshold:
                    point_1= template_positions_dict[initial_point_id]
                    point_2 = template_positions_dict[goal_point_id]
                    x_distance = point_2[0] - point_1[0]
                    estimated_pixel_distance = x_distance

                    # Draw arrow indicating direction of estimated motion:
                    arrow_y_position = int((point_1[1] + point_2[1]) / 2.)
                    text_label_position = (int((point_1[0] + point_2[0]) / 2.) - 15, 
                                           arrow_y_position - 45)
                    cv2.arrowedLine(vis_image_array,
                                    (point_1[0], arrow_y_position),
                                    (point_2[0], arrow_y_position),
                                    color=(0, 0, 0), thickness=2, tipLength=0.2)

                    vis_image_array = cv2.putText(
                            vis_image_array,
                            'Dist.: ' + str(estimated_pixel_distance),
                            text_label_position,
                            cv2_text_label_font_, cv2_text_label_font_scale_ * 2,
                            (0., 0., 0.), 1
                    )
                else:
                    rospy.logwarn(f'[slider_task_solver] Goal point ' + \
                                  f'template ({goal_point_id}) was not ' + \
                                  f'reliably detected in image!')
            else:
                rospy.logwarn(f'[slider_task_solver] Initial point ' + \
                              f'template ({initial_point_id}) was not ' + \
                              f'reliably detected in image!')

            if estimated_pixel_distance is None:
                rospy.logerr(f'[slider_task_solver] Could not estimate ' + \
                             f'slider motion distance!')
            else:
                # TODO: Transform to get appropriate distance to move the slider
                # for the given pixel distance:
                estimated_slider_distance = estimated_pixel_distance

                slider_solution_msg = Float32()
                slider_solution_msg.data = estimated_slider_distance 
                slider_distance_publisher.publish(slider_solution_msg)

                if debug:
                    rospy.loginfo(f'[slider_task_solver] Estimated distance ' + \
                                  f'between templates {initial_point_id} and ' + \
                                  f'{goal_point_id} in image space: ' + \
                                  f'{estimated_pixel_distance} ')
                    rospy.loginfo(f'[slider_task_solver] Estimated distance ' + \
                                  f'to move the slider to solve the task: ' + \
                                  f'{estimated_slider_distance }.')

            if publish_visual_output:
                debug_image_msg = bridge.cv2_to_imgmsg(vis_image_array, 
                                                       encoding="bgr8")

                debug_image_msg.header.stamp = rospy.Time.now()
                debug_image_msg.header.frame_id = current_image_msg_.header.frame_id
                slider_solver_image_publisher.publish(debug_image_msg)

                input_image_msg = bridge.cv2_to_imgmsg(image_cv, encoding="bgr8")
                input_image_msg.header.stamp = rospy.Time.now()
                input_image_msg.header.frame_id = current_image_msg_.header.frame_id
                input_image_publisher.publish(input_image_msg)

            elapsed_time = time.time() - start_time
            rospy.loginfo(f'[slider_task_solver] Finished in {elapsed_time:.3f}s')

            # Optionally save results: annotated image.
            if save_output:
                detection_str = datetime.datetime.now().strftime("%Y%m%d_%H%M%S")
                cv2.imwrite(os.path.join(output_dir_path,
                                         f'slider_solver_output_image_{detection_str}.png'),
                            vis_image_array)

                cv2.imwrite(os.path.join(output_dir_path,
                                         f'slider_solver_input_image_{detection_str}.png'),
                            image_cv)

    except (KeyboardInterrupt, rospy.ROSInterruptException):
        rospy.loginfo('[slider_task_solver] Stopping node')
